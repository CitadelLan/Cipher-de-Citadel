<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Cipher嵐</title>
        <link>https://citadellan.github.io/post/</link>
        <description>Recent content in Posts on Cipher嵐</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Cipher嵐/Animaヰ</copyright>
        <lastBuildDate>Sun, 02 Mar 2025 14:14:55 +0800</lastBuildDate><atom:link href="https://citadellan.github.io/post/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>数据库知识点笔记</title>
        <link>https://citadellan.github.io/database/</link>
        <pubDate>Sun, 02 Mar 2025 14:14:55 +0800</pubDate>
        
        <guid>https://citadellan.github.io/database/</guid>
        <description>&lt;h2 id=&#34;数据库分类&#34;&gt;数据库分类
&lt;/h2&gt;&lt;h3 id=&#34;关系型数据库&#34;&gt;关系型数据库
&lt;/h3&gt;&lt;p&gt;关系型数据库中，&lt;code&gt;数据 == 一系列（表 == 一组列/行）&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;+ 支持事务，满足ACID原则&lt;/li&gt;
&lt;li&gt;+ 支持复杂查询、事务&lt;/li&gt;
&lt;li&gt;+ 数据更新的成本相对较低&lt;/li&gt;
&lt;li&gt;+ 支持JOIN查询，允许同时显示多表查询的结果&lt;/li&gt;
&lt;li&gt;- 扩展性不足
&lt;ul&gt;
&lt;li&gt;当表的字段数量产生改变时，整个表的存储结构就会发生变化，这就需要对原来的表的数据进行迁移与增删，这一操作复杂性高&lt;/li&gt;
&lt;li&gt;如果将数据放在一台服务器上，则由于单个服务器的容量有限，随着数据量增大，容易达到单台服务器的瓶颈&lt;/li&gt;
&lt;li&gt;如果将数据分布到多个服务器，则需要考虑多台服务器间的一致性问题，而该问题通常极其棘手&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;- 对大批量数据的查询效率底下&lt;/li&gt;
&lt;li&gt;- 不支持非结构化数据&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;非关系型数据库&#34;&gt;非关系型数据库
&lt;/h3&gt;&lt;p&gt;非关系型数据库的存储形式多样，其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Key-Value DB：&lt;code&gt;数据 == 一系列k-v对&lt;/code&gt;（Redis）
&lt;ul&gt;
&lt;li&gt;+ 查询快&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Document DB：&lt;code&gt;数据 == 文档（一般为json）&lt;/code&gt;（MongoDB）
&lt;ul&gt;
&lt;li&gt;+ 适用于架构无法定义/频繁更改的非结构化数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Columnar DB：将原来关系数据库中的行以列的形式存储
&lt;ul&gt;
&lt;li&gt;+ 可以更快访问列数据，适用于数据分析&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Graph DB：数据存储在节点中，节点间关系存储在边上
&lt;ul&gt;
&lt;li&gt;+ 更快的复杂关系查询&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于非关系型数据库支持非结构化数据的存储，也带来了以下特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;+ 数据模型更加灵活，不需要像关系型数据库中一样进行大量的相同内容的数据迁移&lt;/li&gt;
&lt;li&gt;+ 更好的可扩展性，上一条已经解释了原因，而这一性质更契合分布式存储&lt;/li&gt;
&lt;li&gt;+ 处理大规模数据、高并发访问效率更高（由于分布式存储）&lt;/li&gt;
&lt;li&gt;- 缺乏事务支持&lt;/li&gt;
&lt;li&gt;- 数据一致性差&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数据库键定义&#34;&gt;数据库键定义
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;超键：唯一表示元祖的属性集&lt;/li&gt;
&lt;li&gt;候选键：不含多余属性的超键（在删除其中一个属性，不唯一）&lt;/li&gt;
&lt;li&gt;主键：用户选作元组标识的一个候选键&lt;/li&gt;
&lt;li&gt;外键：表内的某属性为其他表的主键&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数据库索引&#34;&gt;数据库索引
&lt;/h2&gt;&lt;h3 id=&#34;常用结构&#34;&gt;常用结构
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;HASH/哈希索引：对于单条查询而言快&lt;/li&gt;
&lt;li&gt;BTREE/B+树索引：比起B树使用中序遍历达到遍历效果，B+树遍历更方便&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;常用类型&#34;&gt;常用类型
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;主键索引&lt;/li&gt;
&lt;li&gt;普通索引&lt;/li&gt;
&lt;li&gt;唯一索引&lt;/li&gt;
&lt;li&gt;组合索引&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;覆盖索引&#34;&gt;覆盖索引
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;定义：索引包含所有待查询的字段值&lt;/li&gt;
&lt;li&gt;对于非主键索引就可以查到的记录，则不再需要查询主键来搜索到结果&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;聚集索引&#34;&gt;聚集索引
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;聚集索引决定了表中数据的物理存储顺序，其叶子结点存储了实际的数据行，而非指向数据行的指针&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;非聚集索引&#34;&gt;非聚集索引
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;仅存储索引值以及指向数据行的指针&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数据库并发&#34;&gt;数据库并发
&lt;/h2&gt;&lt;h3 id=&#34;数据库事务&#34;&gt;数据库事务
&lt;/h3&gt;&lt;h4 id=&#34;事务的四大特性acid&#34;&gt;事务的四大特性/ACID:
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;A/原子性：单个事务执行期间不可只执行部分操作，即一个事务只会完成或不完成其中所有操作，若操作期间出错则回滚该事物已经进行的操作&lt;/li&gt;
&lt;li&gt;C/一致性：事务进行前、结束后，数据库完整性不被破坏。例如A向B转账，A一定会扣钱，B一定会得到等量的钱，不允许A扣钱数量与B得到钱的数量不一致&lt;/li&gt;
&lt;li&gt;I/隔离性（操作语句的原子性）：事务在执行某一操作时（可以理解为执行某一条SQL语句时），其他事务不可对这一事务相关的数据进行操作&lt;/li&gt;
&lt;li&gt;D/持久性：事务提交后，这一事务对数据的改变是永久的&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;数据库并发情境下的问题&#34;&gt;数据库并发情境下的问题
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;不可重复读/前后读不一致：一个事务读取到了同一个变量在经其他事务修改前后，值不一致的情况。例如A对变量var进行修改，B前后读取var的值是不一样的&lt;/li&gt;
&lt;li&gt;幻影读/前后范围读不一致：对于同一限定范围的数据，一个事务只负责读，另一事物往其中添加数据。这使得读方每次查询得到的数据数量不同&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;不可重复读和幻影读是很类似的情形，两者在数据的查询范围上有所不同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不可重复读针对的是单个数据的值&lt;/li&gt;
&lt;li&gt;幻影读针对的是一个范围的数据的总数&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;脏读/读到被回滚数据：读取到了被回滚前的数据（脏数据）。例如B读取到缓存中由A进行的修改操作后（该修改还未提交），A又回滚了该操作，与数据库中的实际值不同。&lt;/li&gt;
&lt;li&gt;丢弃修改/修改的数据被别人改了：两个事务先后修改一个值，前者读取到了后者修改的数据，与自己的修改值不一致&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;数据库并发问题的解决方案&#34;&gt;数据库并发问题的解决方案
&lt;/h3&gt;&lt;h4 id=&#34;数据库隔离级别&#34;&gt;数据库隔离级别
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;未提交读：相当于没有隔离，未提交的修改对其他事务可见&lt;/li&gt;
&lt;li&gt;提交读：&lt;strong&gt;仅提交的修改&lt;/strong&gt;对其他事务可见，避免了脏读&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;数据被修改，但未被提交，则该数据不会对其他事务可见，即使此时回滚也不会影响其他事务读取到该数据的结果&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;重复读：&lt;strong&gt;已有数据&lt;/strong&gt;被读取期间，其他事务不可修改&lt;strong&gt;已有的部分&lt;/strong&gt;，但允许其他事务插入记录，避免脏读和不可重复读&lt;/li&gt;
&lt;li&gt;串行化读：有&lt;strong&gt;数据&lt;/strong&gt;被读取期间，其他事务不可修改该&lt;strong&gt;数据&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;数据库锁机制&#34;&gt;数据库锁机制
&lt;/h4&gt;&lt;h5 id=&#34;锁类型&#34;&gt;锁类型
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;一般锁
&lt;ul&gt;
&lt;li&gt;共享锁：允许对数据行/表进行读，在数据行/表有共享锁时，无法申请排它锁（不允许写）&lt;/li&gt;
&lt;li&gt;排它锁：允许对数据行/表进行写（更新/删除），在数据行/表有排它锁时，无法申请共享锁、排它锁&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;意向锁（意向锁一定为表锁）
&lt;blockquote&gt;
&lt;p&gt;意向锁的出现是为了表示该表目前有一部分行有共享锁/排它锁，是一种以偏概全的表示形式。&lt;/p&gt;
&lt;p&gt;在向某些行申请共享锁/排它锁时，会先向数据所在表申请对应的意向共享锁/排它锁&lt;/p&gt;
&lt;p&gt;例：要对表中id=6的数据加排它锁前，系统会先向这个表申请意向排它锁&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;意向共享锁：意向共享锁代表了目前需要向表中部分行加上共享锁，如果该表已经加有排他锁，则意向共享锁的申请会被阻塞直至排它锁解除&lt;/li&gt;
&lt;li&gt;意向排它锁：意向排它锁代表了目前需要向表中部分行加上排他锁，如果该表已经加有共享锁/排他锁，则意向排它锁的申请会被阻塞直至这一非共享锁解除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;锁&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;共享锁 S&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;排它锁 X&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;意向共享锁 IS&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;意向排它锁 IX&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;共享锁 S&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;√&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;×&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;√&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;×&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;排它锁 X&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;×&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;×&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;×&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;×&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;意向共享锁 IS&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;√&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;×&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;√&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;√&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;意向排它锁 IX&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;×&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;×&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;√&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;√&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;死锁两个事务不提交由于锁机制导致的两边事务互卡&#34;&gt;死锁：两个事务不提交，由于锁机制导致的两边事务互卡
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;死锁的产生&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;条件&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;互斥条件：资源被进程排他地占用。进程要求对所分配的资源（如打印机）进行排他性控制，即在一段时间内某资源仅为一个进程所占有。此时若有其他进程请求该资源，则请求进程只能等待。&lt;/li&gt;
&lt;li&gt;保持并等待条件：进程已经保持了至少一个资源，但又提出了新的资源请求，而该资源已被其他进程占有，此时请求进程被阻塞，但对自己已获得的资源保持不放。&lt;/li&gt;
&lt;li&gt;不可剥夺条件：进程所获得的资源在未使用完毕之前，不能被其他进程强行夺走，即只能由获得该资源的进程自己来释放。&lt;/li&gt;
&lt;li&gt;循环等待条件：存在一种进程资源的循环等待链，链中每一个进程已获得的资源同时被链中下一个进程所请求。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;举个例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;session&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                                 &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;session&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;：&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                                            &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Cipher&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;-- 等待session2的第一句的排它锁释放 --&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                                            &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Anima&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                                            &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;-- 等待session1的第一句的排它锁释放 --&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如果上面两个事务都不提交，则两个事务各自成功申请的申请的的排它锁就不会释放（session1-&amp;gt;id=1的排它锁，session2-&amp;gt;id=2的排它锁）就会相互等待对方的排它锁释放，从而卡住&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MySQL的死锁解决方案&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;锁超时：一个事务长时间无法获取锁的时候，主动放弃等待（取消事务），但超时阈值难以确定
&lt;ul&gt;
&lt;li&gt;阈值太短，容易将一些需要稍等一段时间才可以获取到锁的事务提前取消，然后回滚，之后再重新获取锁。这一操作是没有意义的，造成了性能浪费&lt;/li&gt;
&lt;li&gt;阈值太长，容易卡住太多的事务，使得这一数据库给人感觉反应不够快&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;死锁检测：采用wait-for graph算法
&lt;ul&gt;
&lt;li&gt;每个锁被什么事务持有（锁的信息链表），被阻塞的事务在等待什么锁（事务等待链表）。&lt;/li&gt;
&lt;li&gt;每当一个事务需要阻塞等待某个锁时，就会触发一次wait-for graph算法
&lt;ul&gt;
&lt;li&gt;从「锁的信息链表」中尝试寻找该锁，如果存在，则查找被哪个事务所持有&lt;/li&gt;
&lt;li&gt;根据上一步找到的的事务，在「事务等待链表」中进行查找，看看持有锁的事务是否在等待获取其他锁，如果是，则再去看看另一个持有锁的事务，是否在等待其他锁&amp;hellip;..，经过一系列的判断后，再看看是否会出现闭环&lt;/li&gt;
&lt;li&gt;如果出现了闭环，MySQL会选择回滚量最小的事务，如果有回滚量最小的事务不止一个，则回滚其中一个，这一选择需要根据策略的选择来决定（这一点没有查到具体的策略，我能想到的会有：随机、根据事务ID选择、根据事务优先级选择）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;乐观锁与悲观锁&#34;&gt;乐观锁与悲观锁
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;乐观锁：先进行业务操作，只在最后更新数据时再检查数据是否被更新过。&lt;/li&gt;
&lt;li&gt;悲观锁：先加锁，再进行业务操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数据库设计要点&#34;&gt;数据库设计要点
&lt;/h2&gt;&lt;h3 id=&#34;减少join操作&#34;&gt;减少JOIN操作
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;性能考量
&lt;ol&gt;
&lt;li&gt;JOIN操作需要遍历多个表，花费时间长（尤其是在没有索引的情况下）&lt;/li&gt;
&lt;li&gt;每次JOIN都需要创建临时结果表，占用内存空间&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;索引开销：索引不合适/无索引时会导致全表扫描&lt;/li&gt;
&lt;li&gt;数据冗余：一个表与其他表多行数据匹配时，会有数据冗余。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;表A、B各有5条数据，条件为&lt;code&gt;A.name = B.name&lt;/code&gt;，恰好A里每一项name字段都为&lt;code&gt;Cipher&lt;/code&gt;，B里有两项为&lt;code&gt;Cipher&lt;/code&gt;，结果就会有十行数据，而其中数据冗余过多&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;涉及到多表查询，就会有多表的锁管理问题，高并发情况下可能会导致死锁&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;主从复制读写分离&#34;&gt;主从复制+读写分离
&lt;/h3&gt;&lt;h4 id=&#34;主从复制&#34;&gt;主从复制
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;读写分离&#34;&gt;读写分离
&lt;/h4&gt;&lt;h2 id=&#34;mysql&#34;&gt;MySQL
&lt;/h2&gt;&lt;h3 id=&#34;数据库操作&#34;&gt;数据库操作
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Drop：删除整个表&lt;/li&gt;
&lt;li&gt;Truncate：删除表中所有数据&lt;/li&gt;
&lt;li&gt;Delete：删除一部分/全部表数据，需要commit才可生效，可rollback&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据库操作优化&#34;&gt;数据库操作优化
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;尽可能避免使用&lt;code&gt;select *&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;查询出一些可能不需要的字段，即磁盘IO时产生了资源浪费&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;为搜索字段创建索引&lt;/li&gt;
&lt;li&gt;垂直分割分表
&lt;ul&gt;
&lt;li&gt;定义：将一个表中的列根据功能或使用频率等原则拆分为多个表。每个子表只包含原表中的部分列，通过主键或唯一索引关联各个子表。&lt;/li&gt;
&lt;li&gt;通过分割行为，得到了多张宽度更小的表，在查询时的表更小，冗余的IO更少&lt;/li&gt;
&lt;li&gt;分离冷/热数据：使用频率低/高的数据，减少冗余IO&lt;/li&gt;
&lt;li&gt;更小的表宽度意味着一页可以存储的表中数据更多，更容易命中缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用合适的存储引擎&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;存储引擎&#34;&gt;存储引擎
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;InnoDB：
&lt;ul&gt;
&lt;li&gt;MySQL默认存储引擎&lt;/li&gt;
&lt;li&gt;主索引为聚集索引（索引中保存了数据，从而不需要读取磁盘）&lt;/li&gt;
&lt;li&gt;适合：需要事务支持、高并发处理和复杂查询的应用。&lt;/li&gt;
&lt;li&gt;优点：支持MVCC（多版本并发控制），有良好的索引机制，性能稳定。&lt;/li&gt;
&lt;li&gt;缺点：默认配置可能不够优化，资源消耗较高。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MyISAM：
&lt;ul&gt;
&lt;li&gt;适合：对单一字段进行大量读写操作，或者应用规模较小且查询相对简单。&lt;/li&gt;
&lt;li&gt;优点：性能较低时更优，单列优化效果好。&lt;/li&gt;
&lt;li&gt;缺点：不支持事务和复杂查询优化。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&amp;hellip;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
